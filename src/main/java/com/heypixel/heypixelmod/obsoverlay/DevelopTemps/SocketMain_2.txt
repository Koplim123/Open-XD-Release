<?php
// 检查composer autoload文件是否存在
if (!file_exists(__DIR__ . '/vendor/autoload.php')) {
    echo "Composer dependencies not installed. Please run 'composer install' in the WebSocketChat directory.\n";
    exit(1);
}

require_once 'vendor/autoload.php';

use Ratchet\MessageComponentInterface;
use Ratchet\ConnectionInterface;
use Ratchet\WebSocket\WsServer;
use Ratchet\Http\HttpServer;
use Ratchet\Server\IoServer;

class IRCWebSocketServer implements MessageComponentInterface {
    protected $clients;
    protected $users;
    protected $authenticatedUsers;

    public function __construct() {
        $this->clients = new \SplObjectStorage;
        $this->users = [];
        $this->authenticatedUsers = [];
    }

    public function onOpen(ConnectionInterface $conn) {
        // Store the new connection to send messages to later
        $this->clients->attach($conn);
        // 初始化连接但未认证的状态
        $this->authenticatedUsers[$conn->resourceId] = null;
        echo "New connection! ({$conn->resourceId})\n";
        
        // 提示客户端需要进行认证
        $conn->send(json_encode([
            'type' => 'auth_required',
            'message' => 'Authentication required. Please send auth message with irc_nick and mc_name.'
        ]));
    }

    public function onMessage(ConnectionInterface $from, $msg) {
        $numRecv = count($this->clients) - 1;
        echo sprintf('Connection %d sending message "%s" to %d other connection%s' . "\n"
            , $from->resourceId, $msg, $numRecv, $numRecv == 1 ? '' : 's');

        // 解析消息
        $data = json_decode($msg, true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            $from->send(json_encode([
                'type' => 'error',
                'message' => 'Invalid JSON format'
            ]));
            return;
        }

        // 检查是否是认证消息
        if (($data['action'] ?? '') === 'auth') {
            $this->handleAuth($from, $data);
            return;
        }

        // 检查用户是否已认证
        if ($this->authenticatedUsers[$from->resourceId] === null) {
            $from->send(json_encode([
                'type' => 'error',
                'message' => 'Authentication required. Please send auth message first.'
            ]));
            return;
        }

        switch ($data['type'] ?? '') {
            case 'join':
                // 用户加入
                $username = $this->authenticatedUsers[$from->resourceId]['irc_nick'];
                $this->users[$from->resourceId] = [
                    'username' => $username,
                    'connection' => $from
                ];
                
                // 通知所有用户有新用户加入
                $this->broadcast(json_encode([
                    'type' => 'user_joined',
                    'username' => $username,
                    'irc_nick' => $this->authenticatedUsers[$from->resourceId]['irc_nick'],
                    'mc_name' => $this->authenticatedUsers[$from->resourceId]['mc_name'],
                    'timestamp' => date('Y-m-d H:i:s')
                ]));
                
                // 发送欢迎消息给该用户
                $from->send(json_encode([
                    'type' => 'welcome',
                    'message' => 'Welcome to the IRC server, ' . $username . '!',
                    'users' => array_column($this->users, 'username')
                ]));
                break;
                
            case 'message':
                // 消息转发
                $username = $this->authenticatedUsers[$from->resourceId]['irc_nick'];
                $mcName = $this->authenticatedUsers[$from->resourceId]['mc_name'];
                $message = $data['message'] ?? '';
                
                if (!empty($message)) {
                    $this->broadcast(json_encode([
                        'type' => 'message',
                        'username' => $username,
                        'irc_nick' => $this->authenticatedUsers[$from->resourceId]['irc_nick'],
                        'mc_name' => $this->authenticatedUsers[$from->resourceId]['mc_name'],
                        'message' => $message,
                        'timestamp' => date('Y-m-d H:i:s')
                    ]), $from); // 不发送给自己
                }
                break;
                
            case 'private_message':
                // 私聊消息
                $targetUser = $data['target'] ?? '';
                $message = $data['message'] ?? '';
                $sender = $this->authenticatedUsers[$from->resourceId]['irc_nick'];
                $mcName = $this->authenticatedUsers[$from->resourceId]['mc_name'];
                
                if (!empty($targetUser) && !empty($message)) {
                    $targetConnection = null;
                    foreach ($this->users as $user) {
                        if ($user['username'] === $targetUser) {
                            $targetConnection = $user['connection'];
                            break;
                        }
                    }
                    
                    if ($targetConnection) {
                        $targetConnection->send(json_encode([
                            'type' => 'private_message',
                            'from' => $sender,
                            'irc_nick' => $this->authenticatedUsers[$from->resourceId]['irc_nick'],
                            'mc_name' => $this->authenticatedUsers[$from->resourceId]['mc_name'],
                            'message' => $message,
                            'timestamp' => date('Y-m-d H:i:s')
                        ]));
                        
                        // 确认消息已发送
                        $from->send(json_encode([
                            'type' => 'private_message_sent',
                            'to' => $targetUser,
                            'message' => $message
                        ]));
                    } else {
                        $from->send(json_encode([
                            'type' => 'error',
                            'message' => 'User ' . $targetUser . ' not found'
                        ]));
                    }
                }
                break;
                
            case 'minecraft_command':
                // Minecraft命令
                $command = $data['command'] ?? '';
                $sender = $this->authenticatedUsers[$from->resourceId]['irc_nick'];
                $mcName = $this->authenticatedUsers[$from->resourceId]['mc_name'];
                
                if (!empty($command)) {
                    // 广播命令到所有用户
                    $this->broadcast(json_encode([
                        'type' => 'minecraft_command',
                        'username' => $sender,
                        'irc_nick' => $this->authenticatedUsers[$from->resourceId]['irc_nick'],
                        'mc_name' => $this->authenticatedUsers[$from->resourceId]['mc_name'],
                        'command' => $command,
                        'timestamp' => date('Y-m-d H:i:s')
                    ]));
                }
                break;
                
            default:
                $from->send(json_encode([
                    'type' => 'error',
                    'message' => 'Unknown message type'
                ]));
        }
    }

    public function onClose(ConnectionInterface $conn) {
        // The connection is closed, remove it, as we can no longer send it messages
        if (isset($this->users[$conn->resourceId])) {
            $username = $this->users[$conn->resourceId]['username'];
            unset($this->users[$conn->resourceId]);
            
            // 通知所有用户该用户已离开
            $this->broadcast(json_encode([
                'type' => 'user_left',
                'username' => $username,
                'timestamp' => date('Y-m-d H:i:s')
            ]));
        }
        
        // 清理认证状态
        unset($this->authenticatedUsers[$conn->resourceId]);
        
        $this->clients->detach($conn);
        echo "Connection {$conn->resourceId} has disconnected\n";
    }

    public function onError(ConnectionInterface $conn, \Exception $e) {
        echo "An error has occurred: {$e->getMessage()}\n";
        // 清理认证状态
        unset($this->authenticatedUsers[$conn->resourceId]);
        $conn->close();
    }
    
    /**
     * 处理用户认证
     */
    private function handleAuth(ConnectionInterface $conn, array $data) {
        $ircNick = $data['irc_nick'] ?? '';
        $mcName = $data['mc_name'] ?? '';
        
        if (empty($ircNick) || empty($mcName)) {
            $conn->send(json_encode([
                'type' => 'auth_failed',
                'message' => 'Both irc_nick and mc_name are required for authentication'
            ]));
            return;
        }
        
        // 认证成功，存储认证信息
        $this->authenticatedUsers[$conn->resourceId] = [
            'irc_nick' => $ircNick,
            'mc_name' => $mcName
        ];
        
        $conn->send(json_encode([
            'type' => 'auth_success',
            'message' => 'Authentication successful',
            'irc_nick' => $ircNick,
            'mc_name' => $mcName
        ]));
        
        echo "User authenticated: IRC nick={$ircNick}, Minecraft name={$mcName} ({$conn->resourceId})\n";
    }
    
    /**
     * 广播消息给所有连接的客户端
     */
    private function broadcast($msg, ConnectionInterface $exclude = null) {
        foreach ($this->clients as $client) {
            if ($client !== $exclude) {
                $client->send($msg);
            }
        }
    }
}

// 创建并启动WebSocket服务器
$port = 8080;
echo "Starting WebSocket IRC server on port $port...\n";

$server = IoServer::factory(
    new HttpServer(
        new WsServer(
            new IRCWebSocketServer()
        )
    ),
    $port
);

$server->run();